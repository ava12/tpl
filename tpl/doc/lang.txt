типы:
  пустое значение: { } ((. .))
  число
  строка: "" '' %% ``
  список: (: значение , ... :) (: . имя : значение , ... :) (: . {выражение} : значение , ... :)
  функция: function (параметр , ...) { тело }

синтаксис:

объект:
  имя
  имя . имя
  имя [ ключ/индекс , ... ]
  имя . ( ключ/индекс , ... )

ссылка:
  @ выражение

разыменование:
  # выражение

присваивание:
  объект : выражение

конкатенация:
  объект :: выражение

вызов функции:
  объект (параметр , ...)
  объект ( . имя : параметр , ...)
  объект ( . строка : параметр , ...)
  объект ( . { код } : параметр , ...)

ветвление:
  if выражение then выражение [else выражение]

циклы:
  for объект : первое_значение .. последнее_значение (, шаг)? do выражение
  foreach ( объект , значение? (, ключ? (, индекс)? )? ) do выражение
  do выражение

управление циклом:
  break
  continue
  while выражение
  until выражение

выбор:
  case выражение {
    when шаблон then выражение
    when (шаблон , ...) then выражение
  }
  else выражение

логические выражения:
  and (выражение , ...)
  or (выражение , ...)

определение переменных:
  var имя
  var имя : значение
  var (имя , ...)
  var (имя : значение , ...)
  define имя : значение

метапрограмма:
  \{ код }\

неявное преобразование типов при сравнении:
  объекты приводятся к скалярам, скаляры приводятся к "наибольшему" из участвующих типов:
  null < bool < int < float < string


стандартные функции:

логические:
  ~~(a)
  &&(a, ...)
  ||(a, ...)
  ^^(a, ...)

числа:
  +(n, ...)
  -(n), -(a, b)
  *(n, ...)
  /(n), /(a, b)
  div(a, b)
  mod(a, b)
  **(a, b)
  ~(i)
  &(i, ...)
  |(i, ...)
  ^(i, ...)
  <<(n, length?)
  >>(n, length?)
  int(n)
  round(n)
  floor(n)
  ceil(n)

строки:
  chr(code, ...)
  ord(s)
  trim(s)
  length(s)
  substr(s, start, length?)
  replace(s, pairs)

списки:
  count(l)
  slice(l, start?, count?)
  splice(l, start?, count?, insert?)
  key(l, index)
  index(l, key)
  keys(l)
  values(l)
  combine(keys, values)
  sort(l, func?)

типы:
  isset(a)
  typeof(a) // "null"|"bool"|"number"|"string"|"list"|"function"
  data(a)
  scalar(a)

сравнения:
  ==(a, b)
  <>(a, b)
  <(a, b)
  <=(a, b)
  >(a, b)
  >=(a, b)

прочее:
  isconst(@a)
  isref(a)
  call(func, args, @container?)
  error(text?)

мета:
  macros(l)
  include(name)
  require(name)

регулярные выражения:
  regexp(re, mod?):
    .pattern
    .count(s)
    .first(s) \\ [: .match, .pos, .sub: [: (: .match, .pos :)* :] :] | null
    .last(s) \\ [: .match, .pos, .sub: [: (: .match, .pos :)* :] :] | null
    .match(s) \\ (: [: .match, .pos, .sub: [: (: .match, .pos :)* :] :]* :)
    .replace(s, r, limit?) \\ s
    .split(s, limit?) \\ [: s+ :]

файлы:
  file(name):
    .content
    .name()
    .path()
    .error()
    .exists()
    .perm():
      .read
      .append
      .write
      .rename
      .delete
      .include
    .load()
    .save()
    .append()
    .rename(name)
    .move(dir, name?)
    .delete()

  dir(name):
    .path
    .error
    .perm:
      .read
      .append
      .write
      .rename
      .delete
      .include
    .parent(): dir
    .dir(name): dir
    .file(name): file
    .dirs(mask?): dir[]
    .files(mask?): file[]
